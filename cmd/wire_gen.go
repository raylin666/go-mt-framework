// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"mt/config"
	"mt/internal/api"
	"mt/internal/app"
	"mt/internal/biz"
	"mt/internal/data"
	"mt/internal/grpc"
	"mt/internal/repositories"
	"mt/internal/server"
	"mt/internal/service"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(bootstrap *config.Bootstrap, tools *app.Tools) (*kratos.App, func(), error) {
	dataRepo, cleanup := repositories.NewRepositories(bootstrap, tools)
	heartbeatRepo := data.NewHeartbeatRepo(dataRepo, tools)
	heartbeatUsecase := biz.NewHeartbeatUsecase(heartbeatRepo, tools)
	heartbeatService := service.NewHeartbeatService(heartbeatUsecase)
	grpcServer := server.NewGRPCServer(bootstrap, heartbeatService, tools)
	grpcClient, cleanup2, err := grpc.NewGrpcClient(tools)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	handler := api.NewHandler(bootstrap, tools, grpcClient)
	httpServer := server.NewHTTPServer(bootstrap, heartbeatService, tools, handler)
	kratosApp := newApp(tools, grpcServer, httpServer)
	return kratosApp, func() {
		cleanup2()
		cleanup()
	}, nil
}
